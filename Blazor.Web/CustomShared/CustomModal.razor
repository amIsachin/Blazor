@page "/modal/{Id}"
@using Domain.Web.Entities;
@inject NavigationManager _navManager;

<Button Color="ButtonColor.Primary" @onclick="() => xlModal.ShowAsync()">Update Employee</Button>

<Modal @ref="xlModal" title="Update Employee" Size="ModalSize.ExtraLarge">
    <BodyTemplate>
        <EditForm EditContext="@editContext" OnSubmit="HandleOnValidSubmit">

            <div class="mb-3">
                <label class="form-label">Enter Name</label>
                <InputText class="form-control" @bind-Value="EmployeeEntityWeb.Name" DisplayName="Please enter name"></InputText>
            </div>

            <div class="mb-3">
                <label class="form-label">Enter Age</label>
                <InputNumber class="form-control" @bind-Value="EmployeeEntityWeb.Age" DisplayName="Please enter name"></InputNumber>
            </div>

            <div class="mb-3">
                <label class="form-label">Enter Salary</label>
                <InputNumber class="form-control" @bind-Value="EmployeeEntityWeb.Salary" DisplayName="Please enter name"></InputNumber>
            </div>

            <div class="mb-3">
                <label class="form-label">Enter City</label>
                <InputText class="form-control" @bind-Value="EmployeeEntityWeb.City" DisplayName="Please enter name"></InputText>
            </div>

            <div class="mb-3">
                <Button Type="ButtonType.Submit" Color="ButtonColor.Primary">Update Employee</Button>
            </div>

        </EditForm>
    </BodyTemplate>
</Modal>


@code {

    [Parameter]
    public string Id { get; set; } = string.Empty;

    [Inject]
    public IEmployeeRepository EmployeeRepository { get; set; }

    public Modal xlModal = default!;

    private EditContext editContext = default!;

    public EmployeeEntityWeb EmployeeEntityWeb { get; set; } = new();

    /// <summary>
    /// OnInitializedAsync
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {

        editContext = new EditContext(EmployeeEntityWeb);

        EmployeeEntityWeb = await EmployeeRepository.GetEmployeeById(int.Parse(Id));
    }


    /// <summary>
    /// This event handler is responsible for update existing employee.
    /// </summary>
    /// <returns></returns>
    public async Task HandleOnValidSubmit()
    {
        var isUpdated = await EmployeeRepository.UpdateEmployee(int.Parse(Id), EmployeeEntityWeb);

        if (isUpdated is true)
        {
            _navManager.NavigateTo("/", true);
        }

    }


}
